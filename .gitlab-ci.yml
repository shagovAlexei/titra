variables:
  ROOT_URL: "http://localhost:3000"
  IMAGE_NAME: titra
  IMAGE_DB: mongodb
  IMAGE_NET: titra_net

cache:
  key: cache-for-my-task-${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules

before_script:
  - echo "============ Before_script ============"
  - echo $IMAGE_NAME
  - echo $IMAGE_DB
  - echo $CI_COMMIT_REF_SLUG
  - echo $CI_COMMIT_TAG
  - echo $CI_PIPELINE_IID
  - echo $CI_JOB_STAGE
  - echo $CI_PROJECT_NAME
  - echo $CI_PROJECT_TITLE
  - echo $CI_PROJECT_NAMESPACE
  - echo $CI_PROJECT_ROOT_NAMESPACE
  - echo $CI_REGISTRY_IMAGE

stages:
  - build
  - run
  - test
  - deploy

build:
  tags:
    - my1_docker
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "============ Building project ============"
    - echo $CI_PIPELINE_IID
    - docker ps -a
    - docker images
    - echo "=== loginin REGISTRY ==="
    - echo $CI_COMMIT_TAG
    - echo $CI_PIPELINE_IID
    - echo $CI_JOB_STAGE
    - echo $CI_PROJECT_NAME
    - echo $CI_PROJECT_TITLE
    - echo $CI_PROJECT_NAMESPACE
    - echo $CI_PROJECT_ROOT_NAMESPACE
    - echo $CI_REGISTRY_IMAGE
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo "=== build ==="
#     - docker build -t $IMAGE_NAME:$CI_PIPELINE_IID .
#     - echo "=== taging ==="
#     - docker tag $IMAGE_NAME:$CI_PIPELINE_IID $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_PIPELINE_IID
#     - docker tag $IMAGE_NAME:$CI_PIPELINE_IID $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:latest
#     - echo "=== pushing ==="
#     - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_PIPELINE_IID
#     - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:latest
#     - echo "=== remove images ==="
#     - docker rmi -f $IMAGE_NAME:$CI_PIPELINE_IID
#     - docker rmi -f $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_PIPELINE_IID
#     - docker ps -a
#     - docker images

# run:
#   tags:
#     - my1_docker
#   stage: run
#   image: docker:stable
#   services:
#     - docker:dind
#   script:
#     - echo "============ Testing run project ============"
#     - docker ps -a
#     - docker network create $IMAGE_NET
#     - echo "=== runing container ==="
#     - docker run --rm -d --net $IMAGE_NET --name $IMAGE_DB mongo:4.4
#     - sleep 20
#     - docker run --rm -d -p3000:3000 -e MONGO_URL=mongodb://mongodb/$IMAGE_NAME -e ROOT_URL=${ROOT_URL} -e PORT=3000 --net $IMAGE_NET --name $IMAGE_NAME $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:latest
#     - docker ps -a

# test:
#   tags:
#     - my1_shell
#   stage: test
#   script:
#     - echo "=== testing web ==="
#     - docker ps -a
#     - pwd
#     - sleep 35
#     - if [[ $(curl -so /dev/null -w "%{http_code}" http://localhost:3000) -eq 200 ]]; then echo "Test passed."; else echo "Error!!!"; exit 1; fi;
#     - docker stop $IMAGE_NAME
#     - docker stop $IMAGE_DB
#     - docker network rm $IMAGE_NET
#     - docker rmi -f $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:latest
    
# deploy:
#   tags:
#     - my1_shell
#   stage: deploy
#   script:
#     - echo "============ Deploy project ============"
#     - uname -a
#     - pwd
#     - echo "============ Finish project ============"



